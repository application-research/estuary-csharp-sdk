/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MainAddContentToCollectionParams
    /// </summary>
    [DataContract]
    public partial class MainAddContentToCollectionParams :  IEquatable<MainAddContentToCollectionParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainAddContentToCollectionParams" /> class.
        /// </summary>
        /// <param name="cids">cids.</param>
        /// <param name="collection">collection.</param>
        /// <param name="contents">contents.</param>
        public MainAddContentToCollectionParams(List<string> cids = default(List<string>), string collection = default(string), List<int> contents = default(List<int>))
        {
            this.Cids = cids;
            this.Collection = collection;
            this.Contents = contents;
        }

        /// <summary>
        /// Gets or Sets Cids
        /// </summary>
        [DataMember(Name="cids", EmitDefaultValue=false)]
        public List<string> Cids { get; set; }

        /// <summary>
        /// Gets or Sets Collection
        /// </summary>
        [DataMember(Name="collection", EmitDefaultValue=false)]
        public string Collection { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name="contents", EmitDefaultValue=false)]
        public List<int> Contents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainAddContentToCollectionParams {\n");
            sb.Append("  Cids: ").Append(Cids).Append("\n");
            sb.Append("  Collection: ").Append(Collection).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainAddContentToCollectionParams);
        }

        /// <summary>
        /// Returns true if MainAddContentToCollectionParams instances are equal
        /// </summary>
        /// <param name="input">Instance of MainAddContentToCollectionParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainAddContentToCollectionParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cids == input.Cids ||
                    this.Cids != null &&
                    input.Cids != null &&
                    this.Cids.SequenceEqual(input.Cids)
                ) && 
                (
                    this.Collection == input.Collection ||
                    (this.Collection != null &&
                    this.Collection.Equals(input.Collection))
                ) && 
                (
                    this.Contents == input.Contents ||
                    this.Contents != null &&
                    input.Contents != null &&
                    this.Contents.SequenceEqual(input.Contents)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cids != null)
                    hashCode = hashCode * 59 + this.Cids.GetHashCode();
                if (this.Collection != null)
                    hashCode = hashCode * 59 + this.Collection.GetHashCode();
                if (this.Contents != null)
                    hashCode = hashCode * 59 + this.Contents.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
